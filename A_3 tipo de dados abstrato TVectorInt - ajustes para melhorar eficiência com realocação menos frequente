#include <stdio.h>
#include <stdlib.h>
#include <time.h>

unsigned int randaux()
{
  static long seed=1;
  return(((seed = seed * 214013L + 2531011L) >> 16) & 0x7fff);
}


/* Tipo de dados abstrato: TVectorInt*/
typedef struct {
    int n, alocado; 
    int *valor;
} TVectorInt;

TVectorInt VICriar(){
    TVectorInt vector;
    vector.valor = NULL;
    vector.n = 0;
    vector.alocado = 0;
    return vector;
}

int VITamanho(TVectorInt *vector){
    return vector->n;
}

void VIInternoRealocar(TVectorInt *vector, int i){
    int k, *vectorAntigo;
    vectorAntigo = vector->valor;                               //guarda endereco do vector passado à funcao realocar, no ponteiro vectorAntigo
    vector->valor = (int *)malloc( 2 * (i+1) * sizeof(int) );   //realoca, alocando o dobro do necessario para otimizar tempo de execucao, da ordem N em vez da ordem N^2 caso se aumentasse um a um
    if(vector->valor != NULL){                                  //testa realocacao
        for(k=0; k < vector->n; k++){
            vector->valor[k]=vectorAntigo[k];                   //recoloca os elementos do vetor antigo novamente no novo vector realocado
        }
        vector->alocado=(i+1)*2;
    } else {
        vector->alocado = 0;
    }
    if(vectorAntigo != NULL){
        free(vectorAntigo);
    }
}

void VIValorI(TVectorInt *vector, int i, int valor){
    /* acesso fora dos parametros, realocar */
    if(i >= vector->alocado){
        VIInternoRealocar(vector, i);
    }
    
    if( i >= 0 && i < vector->alocado){
        vector->valor[i] = valor;
        /* atualizar a dimensao logica do vector */
        if(i>vector->n){
            vector->n=i+1;
        }
    }
}

int VIValorO(TVectorInt *vector, int i){
    /*nao colocar realocaca aqui já que esta operacao e so de leitura e nao de escrita */
    if( i >= 0 && i < vector->n){
        return vector->valor[i];
    }
    return 0;
}

void VILibertar (TVectorInt *vector){
    if(vector->valor != NULL){
        free(vector->valor);
        vector->valor = NULL;
        vector->alocado = 0;
        vector->n = 0;
    }
}


/* Programa */
TVectorInt VectorAleatorio(int n, int base){
    TVectorInt vector;
    int i;
    
    vector = VICriar();
    
    for (i=0; i<n; i++){
        VIValorI(&vector, i, randaux()%base);
    }

    return vector;
}

void MostraVector(TVectorInt *vector){
    int i;
    for (i=0; i<vector->n; i++){
        printf("%d ", VIValorO(vector, i) );
    }
}


int main() {
    TVectorInt vector;
    int n, base;
    
    clock_t instante;
    srand(1);
    
    printf("Dimensao: ");
    scanf("%d", &n);
    printf("Valor maximo: ");
    scanf("%d", &base);
    
    instante = clock();

    VectorAleatorio(n, base);

    if(n<100){
        MostraVector(&vector);
    }

    VILibertar(&vector);
    
    printf("Tempo (s): %.1g", (float)(clock()-instante)/CLOCKS_PER_SEC);

    return 0;
}
